;------------------------------------------------------
; ACSI implementation in PIO
; Waits for A1 and CS to go low.
; (for use with Fujinet)
;------------------------------------------------------
; Written by Johan Tibbelin (sjfroos)
;

; ACSI ID to look for
.define ID 3 

;GPIO pins for control signals
.define AIRQ 6
.define CS 2
.define A1 22
.define ACK 21
.define RW 26
.define LED 25
.program send_irq
.side_set 1


start:
    set pins,1 side 1
    .wrap_target
    wait 1 irq 4 side 1
send_irq:
    nop [15] side 0
    nop [15] side 0
    nop [15] side 0
    nop [15] side 0
    set pins,0 side 0 ;set IRQ to low
    set y,7 side 0
    ;wait loop
w8:
    nop side 0 [15]
    nop side 0 [15]
    jmp y--,w8 side 0
    set pins,1 side 1
    irq clear 4 side 1
    .wrap
%c-sdk {

#include "hardware/gpio.h"
#include "hardware/clocks.h"
#define LED 25
// PIO Freq 50 MHz (20ns per clock cycle)
#define PIO_HZ 50000000

static inline void wait_cmd_program_init(PIO pio, uint sm, uint offset, uint pin) {
  // 1. Define a config object
  pio_sm_config config = wait_cmd_program_get_default_config(offset);

  // 2. Set and initialize the output pins
  //sm_config_set_in_pins(&config, 8);
  sm_config_set_out_pins(&config, 8,8);
  
  sm_config_set_set_pins(&config, pin, 1);
  sm_config_set_sideset_pins(&config,6);
  
  sm_config_set_in_shift(&config, false, true,8);
  sm_config_set_out_shift(&config, true,false,8);
  
  float div = (float)clock_get_hz(clk_sys) / PIO_HZ;
  printf("Send IRQ PIO div is: %2.2f\n",div);
  sm_config_set_clkdiv(&config, div);
  
  // 3. Apply the configuration & activate the State Machine
  pio_sm_init(pio, sm, offset, &config);
  pio_gpio_init(pio,6);
  pio_sm_set_consecutive_pindirs(pio,sm,6,1,true);
  
  pio_sm_set_enabled(pio, sm, true);
}
%}