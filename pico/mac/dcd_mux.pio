;
; FujiNet Project
;
; Vintage Macintosh Microfloppy Controller Interface
; selects output pins between RMT, TACH and LATCH
;
;

.define public LSTRB 12
.define public ENABLE 7

; The DCD mux will really control the RD line direction.
; It will ...
; count the number of strobes and disable RD after 1, 2, or 3 of them
; it will reset the counter when disable goes high
; probably at some point should push the strobe counter so the FN can decide which disk image to use

.program dcd_mux
.side_set 1 opt pindirs
    ; initial state is RD is hi-z and we have 2 DCDs
    ; we wait to be enabled then RD goes to output
.wrap_target
start:    
    set x, 0                side 0      ; put the number of DCD devices in X (0xf020 - last digit is number of DCDs)
    wait 0 gpio ENABLE                  ; don't do anything until we're enabled
    in x, 32                            ; say we are at the first DCD
    jmp x-- cont                        ; decrement X to wait for the next strobe
cont:
    ; now we need to wait to be strobed or to be disabled
    jmp pin start           side 1 ; disabled so go back to the beginning!
    mov osr, pins            ; get LSTRB value into osr
    out y, 1                 ; stick it in Y
    jmp !Y cont             ; not strobing loop
    wait 0 gpio LSTRB
    in x, 32                ; push X to the FIFO to tell the program a certain drive is selected
    jmp x-- cont
    wait 1 gpio ENABLE      side 0
.wrap
    nop                     ; need to pad a couple instructions to make it same length as floppy mux
    nop

% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO input and output, and configures the SM to output on a particular pin
// #define LSTRB 12
// #define ENABLE 7
void dcd_mux_program_init(PIO pio, uint sm, uint offset, uint set_pin) {
   // configure a SM
   pio_sm_config c = dcd_mux_program_get_default_config(offset);
   // config side set
    sm_config_set_sideset_pins(&c, set_pin);
    sm_config_set_in_pins(&c, LSTRB); 
    sm_config_set_jmp_pin(&c, ENABLE);
   // there are 4 wires to read for latch mux, shift to the right, no autopull
   sm_config_set_set_pins(&c, set_pin, 1);
   sm_config_set_out_shift(&c, true, false, 1);
   sm_config_set_in_shift(&c, true, true, 32);
   pio_gpio_init(pio, set_pin);
   pio_sm_set_consecutive_pindirs(pio, sm, set_pin, 1, false);
   // initialize
   pio_sm_init(pio, sm, offset, &c);
}
%}